import Component from '@glimmer/component';
import { service } from '@ember/service';
import { tracked } from '@glimmer/tracking';
import { modifier } from 'ember-modifier';
import { on } from '@ember/modifier';
import type { FileService } from '#file';
import type RouterService from '@ember/routing/router-service';
import { handleDrop, handleFileChoose, preventDefaults } from './drop-utils';
import { assert } from '@ember/debug';

const isDropping = 'is-dropover';

const dragLeave = modifier((element) => {
  element.addEventListener('dragleave', (event: Event) => {
    assert(
      `[BUG]: the event target is missing`,
      event.target instanceof HTMLElement
    );
    event.target.parentElement?.classList.remove(isDropping);
    Object.assign(event.target.style, { display: 'none' });
  });
});

const dropArea = modifier((element, [handleDrop]: [(event: Event) => void]) => {
  function enter(event: Event) {
    assert(
      `[BUG]: the event currentTarget is missing`,
      event.currentTarget instanceof HTMLElement
    );
    preventDefaults(event);
    event.currentTarget?.classList?.add(isDropping);
    assert(
      `[BUG]: the element lost all its children`,
      event.currentTarget.lastElementChild instanceof HTMLElement
    );

    Object.assign(event.currentTarget.lastElementChild.style, {
      display: 'block',
    });
  }

  function drop(event: Event) {
    assert(
      `[BUG]: the event currentTarget is missing`,
      event.currentTarget instanceof HTMLElement
    );
    event.currentTarget?.classList?.remove(isDropping);
    assert(
      `[BUG]: the element lost all its children`,
      event.currentTarget.lastElementChild instanceof HTMLElement
    );
    Object.assign(event.currentTarget.lastElementChild.style, {
      display: 'none',
    });

    handleDrop(event);
  }
  element.addEventListener('dragover', preventDefaults);
  element.addEventListener('dropenter', enter);
  element.addEventListener('dragenter', enter);
  element.addEventListener('dragleave', preventDefaults);

  element.addEventListener('drop', drop);
});

export class FileDropZone extends Component<{
  Args: {
    file: FileService;
    onSuccess?: () => void;
  };
}> {
  @service declare router: RouterService;

  @tracked error: string | undefined;

  handleDrop = async (dropEvent: Event) => {
    const fileData = handleDrop(
      { onError: (e) => (this.error = e) },
      dropEvent
    );

    if (!fileData) return;

    await this.args.file.handleDroppedFile(fileData);

    this.args.onSuccess?.();
  };

  handleFileSelect = async (changeEvent: Event) => {
    const fileData = handleFileChoose(
      { onError: (e) => (this.error = e) },
      changeEvent
    );

    if (!fileData) return;

    await this.args.file.handleDroppedFile(fileData);

    this.args.onSuccess?.();
  };

  <template>
    <label class="drop-container {{if @file.hasFile 'has-file'}}">
      {{#if this.error}}
        <p class="error">{{this.error}}</p>
      {{/if}}
      <input
        name="dropped-file"
        type="file"
        hidden
        {{on "change" this.handleFileSelect}}
      />
      <div class="drop-zone" {{dropArea this.handleDrop}}>
        {{#if @file.hasFile}}
          <p>
            Selected:
            <pre><code>{{@file.fileName}}</code></pre>
          </p>
          <hr />

          <p>Drop another file to replace</p>
        {{else}}
          Drop the Summary JSON file here

          <p>
            These files are usually located in
            <code>[your repo]/.turbo/runs/xyz.json</code>
          </p>

          And generated by using the
          <code>--summarize</code>
          flag on
          <code>turbo</code>
          commands. Example:
          <pre>
          turbo build --summarize
        </pre>
        {{/if}}
        <div class="drag-hover-cover" {{dragLeave}}></div>
      </div>

    </label>
    <style>
      .drop-container {
        border: 2px dashed;
        border-radius: 1rem;
        display: block;
        position: relative;
        transition:
          border-color 0.2s ease,
          background-color 0.2s ease;

        .is-dropover {
          border-color: #4a90e2;
          background-color: rgba(74, 144, 226, 0.5);
        }

        .drag-hover-cover {
          position: absolute;
          inset: 0;
          display: none;
        }

        &.has-file {
          border-color: #90e2a9;
          background-color: rgba(144, 226, 76, 0.05);
        }

        .drop-zone {
          padding: 3rem;
          transition:
            transform 0.2s ease,
            box-shadow 0.2s ease;

          &:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          }
          &.is-dropover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          }

          &.drag-over {
            background: var(--page-bg);
          }
        }
      }
    </style>
  </template>
}
